
1. 구글 개발자 console 설정
    https://console.cloud.google.com/apis/credentials
    - 프로젝트 생성
    - Oauth 인증
        사용자 인증정보 -> 사용자 인증정보 만들기 -> OAuth 클라이언트 ID 선택
    - API 주소
        URL
        local : http://localhost:4000
        server : https://ezhome.kro.kr
    
        승인 된 리다이렉션 URL
        local : http://localhost:4000/api/member/google-callback
        server : https://ezhome.kro.kr/api/member/google-callback

2. 발급 받은 Client ID와 Client Secret을 .env 파일에 추가


3. passport google 설치
    yarn add passport-google-oath2
    passport 사이트(https://www.passportjs.org/packages/passport-google-oauth2/)


4. passport.js 

* passport.js
    require('dotenv').config();
    const GoogleStrategy = require('passport-google-oauth2').Strategy;
    const { GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, CALLBACK_URL } = process.env;

    module.export = (app) => {
        ... 생략
        ...,
        //passport.use()
        //param1 : new GoogleStrategy({client정보})
        * client정보 : clientID, clientSecret, callbackURL, passReqToCallback

        //param2 : async function(request, accessToken, refreshToken, profile, done)

         passport.use(new GoogleStrategy(
		{
			clientID: GOOGLE_CLIENT_ID,
			clientSecret: GOOGLE_CLIENT_SECRET,
			callbackURL: `${CALLBACK_URL}/api/member/google-callback`,
			passReqToCallback: true
		},
        async function (request, accessToken, refreshToken, profile, done) {
			// console.log(profile);
			if(profile && profile.id) {
				const member = await memberModel.loginGoole(request, profile);
				return done(null, member);
			} else {
				return done('로그인 실패', null )
			}
		}
	));
    }

5. memberModel.js 
    async loginGoogle(req, profile) 구현
    req : passport Google에서 받은 요청 데이터
    profile : Google 로그인 정보 데이터

    1) 이미 회원이 존재한다면 => getMemberBy(email)
    2) 존재하지 않는다면 => Google 로그인 정보를 가지고 member데이터 생성 후  getMemberBy(email)

6. Login.vue
    <!-- 구글 로그인 버튼 박스 -->
     <v-card-text class="mt-n4">
        <v-btn @click="loginGoogle" block>구글 로그인</v-btn>
      </v-card-text>

   1) export
    import 추가목록
          vuex mapMutations 추가 
    methods 추가목록 => 
        ...mapMutations('SET_MEMBER', 'SET_TOKEN')
        async loginGoogle
            - 자식 화면 추가(구글 로그인 창)
            - 자식 화면 callback 처리 함수 지정(구글 로그인 정상 처리 될 경우)

        googleLoginCallback
            - 멤버 정보 및 토큰 처리 store 저장

7. server/api/member.js Google 로그인 관련 router 추가
    // 구글 로그인 요청
    router.get('/loginGoogle', passport.authenticate("google", { scope: ["email", "profile"] }));

    // 구글 로그인 콜백
    router.get('/google-callback',  (req, res)=>{
	passport.authenticate('google', async function (err, member) {
		const result = await modelCall(memberModel.googleCallback, req, res,  err, member);
		res.end(result);
	})(req, res);
});

8. server/api/_model/memberModel.js googleCallback 함수 추가
(router.get('/google-callback' 에서 호출)
    
    async googleCallback(req, res, err, member)
        - 구글 로그인 정보 
        - 작성 된 html 파일의 내용을 가져와 return(_model/socialPopup.html)

9. _model/socialPopup.html
    socialPopup.html 부모 창(Login.vue)의 함수(googleLoginCallback)호출
        window.opener.onGoogleCallback(payload);
        (window.opener.onGoogleCallback 관련 내용은 6. Login.vue 참조)


10. window.opener는 동일한 도메인에서만 작동하므로 build를 한 후 express 서버에 접속 후 로그인 테스트를 진행 --> yarn start(localhost:4000)
    
    localhost:4000 화면에서 구글 로그인 하는 경우 아래와 같은 error 남
    Uncaught DOMException: Blocked a frame with origin "http://localhost:4000" from accessing a cross-origin frame.
    (https://junspapa-itdev.tistory.com/55)

 



            



    
    





    